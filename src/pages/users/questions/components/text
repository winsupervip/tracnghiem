<template>
  <div :id="$style.testpage">
    <div :id="$style.container">
      <div :class="$style.title">
        <a href="#" :class="$style.description"> {{ title }}</a>
      </div>
      <div :class="$style.partQuest">
        <div :class="$style.listQuestion">
          <div v-if="!isDoneExam" :class="$style.timeRemain">
            {{ hour }}:{{ minute }}:{{ second }}
          </div>
          <div v-else>
            <div :class="$style.score">0 điểm</div>
            <div :class="$style.result">
              <div :class="$style.wrong">
                <div><span></span>Trả lời sai</div>
                <label for="quantity">{{ rightNumber }}</label>
                <div>Câu sai</div>
              </div>
              <div :class="$style.correct">
                <div><span></span>Trả lời đúng</div>
                <label for="quantity">{{ wrongNumber }}</label>
                <div>Câu dúng</div>
              </div>
            </div>
            <span><i class="far fa-clock"></i> </span
            ><span>Bấm vào ô số để xem câu hỏi</span>
          </div>

          <div :class="$style.line"></div>
          <span :class="$style.titleQuestion">
            <label for="">Danh sách câu hỏi</label>
            <i class="fas fa-chevron-down"></i>
          </span>
          <div v-if="!isDoneExam" :class="$style.numberQuestions">
            <button
              v-for="(ask, index) in ListQuestionId"
              :key="index"
              :class="doneQuestion[index] ? $style.doneNumber : $style.number"
              @click="getQuestionInfo(index)"
            >
              {{ index + 1 }}
            </button>
          </div>
          <div v-else :class="$style.numberQuestions">
            <b-button
              v-for="(question, index) in examResult"
              :key="index"
              :class="
                question.traLoiDung
                  ? $style.correctAnswers
                  : $style.wrongAnswers
              "
              variant="outline-primary"
              @click="getQuestion(index)"
              >{{ index + 1 }}</b-button
            >
          </div>

          <button v-if="!isDoneExam" :class="$style.submit" @click="endExam">
            Nộp bài
          </button>
        </div>
        <div :class="$style.questionDetail">
          <span>Câu hỏi {{ questionNumber + 1 }}</span>
          <div :class="$style.ask" v-html="question"></div>
          <div :class="$style.line"></div>
          <div :class="$style.answer">
            <ul>
              <li v-for="answer in ListAnswer" :key="answer.id" type="A">
                <input
                  v-model="selected"
                  type="radio"
                  name="answer"
                  :value="answer.sortOrder"
                />

                <label v-html="answer.noiDung"></label>
              </li>
            </ul>
          </div>
          <div v-if="isDoneExam" :class="$style.explain">
            <p
              v-if="doneQuestion[questionNumber].status"
              :class="$style.rightResult"
            >
              Đúng
            </p>
            <p v-else :class="$style.wrongResult">Sai</p>
            <p :class="$style.resultAnswer">Đáp án đúng chưa có</p>
          </div>

          <div :class="$style.changeQuestion">
            <button
              v-show="prevBtn"
              :class="$style.prevBtn"
              @click="getQuestionInfo(questionNumber - 1)"
            >
              <i class="fas fa-chevron-left"></i>câu hỏi trước</button
            ><button
              v-show="nextBtn"
              :class="$style.nextBtn"
              @click="getQuestionInfo(questionNumber + 1)"
            >
              <i class="fas fa-chevron-right"></i>câu hỏi tiếp theo
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import {
  defineComponent,
  useContext,
  reactive,
  toRefs,
  useFetch,
  useRoute,
  watch,
} from '@nuxtjs/composition-api'
import ExamApi from '../../../api/training'

export default defineComponent({
  auth: false,
  setup() {
    const { $loader, $logger } = useContext()
    const route = useRoute()
    const examCode = route?.value?.query?.id

    const data = reactive({
      prevBtn: true,
      nextBtn: true,
      hashId: '',
      ListQuestionId: [],
      title: '',
      questionId: '',
      question: '',
      currentQuestion: '',
      ListAnswer: [],
      hour: 1,
      minute: 0,
      second: 10,
      questionNumber: '',
      ListDoneAnswer: [],
      selected: [],
      doneQuestion: [],
      examDoneCode: '',
      examResult: [],
      isDoneExam: false,
      rightNumber: 0,
      wrongNumber: 0,
    })

    const countDown = setInterval(() => {
      data.second--
      if (data.second < 0) {
        data.second = 59
        data.minute--
      }
      if (data.minute < 0) {
        data.minute = 59
        data.hour--
      }
      if (data.hour === 0 && data.minute === 0 && data.second === 0) {
        alert('Time out!')
        clearInterval(countDown)
      }
    }, 1000)
    // lấy bộ đề
    const { fetch } = useFetch(async () => {
      $loader()

      const { data: result } = await ExamApi.getExamCode(examCode)
      data.hashId = result.object.data

      getExamInfo(data.hashId)
      $loader().close()
    })
    // từ bộ đề lấy bộ câu hỏi
    const getExamInfo = async (hashId) => {
      const { data: result } = await ExamApi.getExamInfo(hashId)
      data.ListQuestionId = result.object.questions

      data.title = result.object.exam.tieuDe
      getQuestionInfo(0)
    }
    // bộ câu hỏi lấy câu hỏi
    const getQuestionInfo = async (index) => {
      if (index >= 0 && index < data.ListQuestionId.length) {
        if (
          data.currentQuestion !== null &&
          data.doneQuestion[data.questionNum]
        ) {
          sentAnswer()
        }

        data.questionId = data.ListQuestionId[index].questionId

        const { data: result } = await ExamApi.getQuestioninfo(
          data.hashId,
          data.questionId
        )
        data.currentQuestion = result.object
        data.ListAnswer = data.currentQuestion.answers
        data.question = data.currentQuestion.noiDung
        data.questionNumber = index
      }
      if (index > 0 && index < data.ListQuestionId.length - 1) {
        data.prevBtn = true
        data.nextBtn = true
      } else if (index <= 0) {
        data.nextBtn = true
        data.prevBtn = false
      } else if (index === data.ListQuestionId.length - 1) {
        data.nextBtn = false
        data.prevBtn = true
      }
    }
    const chooseAnswer = (value) => {
      if (typeof value === 'number') {
        data.ListDoneAnswer = [value]
      } else {
        data.ListDoneAnswer = value
      }

      data.doneQuestion[data.questionNumber] = {
        status: null,
        valueChoose: value,
      }
    }
    const sentChoose = () => {
      chooseAnswer(data.selected)
    }
    const sentAnswer = () => {
      const dataSent = {
        hashId: data.hashId,
        questionId: data.questionId,
        answers: data.ListDoneAnswer,
      }
      ExamApi.sentAnswer(dataSent)
    }
    const checkBeforeDone = () => {
      for (let i = 0, total = data.ListQuestionId.length; i < total; i++) {
        if (!data.doneQuestion[i]) {
          return false
        }
      }
      return true
    }

    const endExam = async () => {
      if (checkBeforeDone()) {
        const { data: result } = await ExamApi.doneExam(data.hashId)
        $logger.info(result)
        data.examDoneCode = result?.object.data
        getExamResult()
      } else {
        alert('Con mot so cau chua hoan thanh')
      }
    }
    const getExamResult = async () => {
      const { data: result } = await ExamApi.getExamResult(data.examDoneCode)
      $logger.info(result)
      let right = 0
      let wrong = 0
      data.examResult = result?.object?.questions
      result?.object?.questions.map((item, index) => {
        if (item.traLoiDung) {
          right += 1
          data.doneQuestion[index].status = true
        } else {
          data.doneQuestion[index].status = false
          wrong += 1
        }
        return 0
      })
      data.rightNumber = right
      data.wrongNumber = wrong
      data.isDoneExam = true
      alert('nop thanh cong')
    }

    fetch()
    watch(() => {
      $logger.info('doi cau hoi')
      if (data.doneQuestion[data.questionNumber]) {
        data.selected = data.doneQuestion[data.questionNumber].valueChoose
      } else {
        data.selected = []
      }
    })

    watch(
      () => data.selected,
      () => {
        if (data.selected.length > 0 || String(data.selected).length > 0) {
          $logger.info('lua chon thay doi')
          sentChoose()
        }
      }
    )
    return {
      ...toRefs(data),
      getQuestionInfo,
      chooseAnswer,
      endExam,
    }
  },
})
</script>

<style module>
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;800&display=swap');
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css');
* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-family: 'Open Sans';
}
a {
  text-decoration: none;
}
#container {
  width: 80%;
  margin: 100px auto;
}
#container .title {
  display: flex;

  padding: 49px 20px 49px;
}
#container .title a {
  font-style: normal;
  font-weight: bold;
  font-size: 18px;
  color: #051d40;
}
#container .partQuest {
  display: flex;
  justify-content: space-around;
}
#container .partQuest .listQuestion {
  width: 350px;
  height: 900px;
  padding: 13px 15px 0 19px;
  background: #ffffff;
  border: 1px solid #d8d8d8;
  box-sizing: border-box;
  border-radius: 5px;
  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
}
#container .partQuest .listQuestion .timeRemain {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 319px;
  height: 49px;
  text-align: center;

  background: #e2e8f0;
  border-radius: 50px;
  font-style: normal;
  font-weight: bold;
  font-size: 25px;
  line-height: 16px;

  color: #000000;
}

#container .partQuest .listQuestion .score {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 319px;
  height: 49px;
  text-align: center;

  background: #e2e8f0;
  border-radius: 50px;
  font-style: normal;
  font-weight: bold;
  font-size: 25px;
  line-height: 16px;

  color: #000000;
}
#container .partQuest .listQuestion .result {
  display: flex;
  justify-content: space-around;
  text-align: center;
}

.line {
  width: 100%;
  height: 1px;
  margin: 20px 0;
  background-color: #c4c4c4;
}
.doneButtonQuestion {
  background: yellowgreen;
  border: 1px solid #145da0;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-style: normal;
  font-weight: 800;
  font-size: 18px;
  color: #fff;
  width: 35px;
  height: 35px;
}

.line {
  width: 100%;
  height: 1px;
  margin: 20px 0;
  background-color: #c4c4c4;
}
#container .partQuest .listQuestion .titleQuestion {
  display: flex;
  justify-content: space-between;
}
#container .partQuest .listQuestion .titleQuestion label {
  font-style: normal;
  font-weight: bold;
  font-size: 16px;
  line-height: 16px;

  color: #051d40;
}
#container .partQuest .listQuestion .titleQuestion .fa-chevron-down {
  background: #051d40;
}
#container .partQuest .listQuestion .numberQuestions {
  margin: 20px 0;
  display: grid;
  grid-template-columns: auto auto auto auto auto;
  grid-gap: 10px;
}
#container .partQuest .listQuestion .numberQuestions .number {
  background: #ffffff;
  border: 1px solid #145da0;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-style: normal;
  font-weight: 800;
  font-size: 18px;
  color: #000000;
  width: 35px;
  height: 35px;
}

#container .partQuest .listQuestion .numberQuestions .doneNumber {
  background: yellowgreen;
  border: 1px solid #145da0;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-style: normal;
  font-weight: 800;
  font-size: 18px;
  color: #fff;
  width: 35px;
  height: 35px;
}
.wrongAnswers {
  border: 1px solid #145da0;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-style: normal;
  font-weight: 800;
  font-size: 18px;
  color: #fff;
  width: 35px;
  height: 35px;
  background-color: #ff2f00;
}
.correctAnswers {
  border: 1px solid #145da0;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-style: normal;
  font-weight: 800;
  font-size: 18px;
  color: #fff;
  width: 35px;
  height: 35px;
  background-color: #145da0;
}
#container
  .partQuest
  .listQuestion
  .numberQuestions
  .number
  .chooseBtnQuestion {
  background: #ffffff;
  border: 1px solid #145da0;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-style: normal;
  font-weight: 800;
  font-size: 18px;
  color: #000000;
  width: 35px;
  height: 35px;
}
#container .partQuest .listQuestion .submit {
  font-family: sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 309px;
  height: 54px;
  background: #ffffff;
  border: 1px solid #145da0;

  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  border-radius: 5px;

  font-weight: 700;
  font-size: 24px;

  color: #051e40;
}
#container .partQuest .listQuestion .submit:hover {
  background-color: #dfdfdf;
}

#container .partQuest .questionDetail {
  width: 800px;
  height: 900px;
  background: #ffffff;
  border-radius: 5px;
  border: 1px solid #d8d8d8;
  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  padding: 4px 6px 0 25px;
}
#container .partQuest .questionDetail span {
  width: 711px;
  height: 55px;
  font-family: sans-serif;
  font-weight: bold;
  font-size: 16px;
  line-height: 30px;

  color: #051e40;
}
#container .partQuest .questionDetail .ask {
  width: 685px;
  height: 100px;
  font-size: 14px;
  line-height: 30px;
}

#container .partQuest .questionDetail .answer ul li {
  line-height: 3rem;
}
.right {
  padding: 10px;
  background: blue;
}

.wrong label {
  font-style: normal;
  font-weight: bold;
  font-size: 18px;
  line-height: 16px;

  color: #ff2f00;
}
.correct label {
  font-style: normal;
  font-weight: bold;
  font-size: 18px;
  line-height: 16px;

  color: #145da0;
}
.resultAnswer {
  margin-left: 20px;
}
.wrongResult {
  background-color: red;
  color: white;
  text-align: center;
  padding: 5px 0;
  width: 56px;
  height: 33px;
}
.rightResult {
  background-color: #145da0;
  color: white;
  text-align: center;
  padding: 5px 0;
  width: 56px;
  height: 33px;
}
#container .partQuest .questionDetail .changeQuestion {
  display: flex;
  justify-content: space-around;
}
#container .partQuest .questionDetail .changeQuestion button {
  width: 174px;
  height: 29px;

  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  border-radius: 5px;
}
#container .partQuest .questionDetail .changeQuestion button.prev {
  background: #b1d4e0;
  border: 1px solid #145da0;
  box-sizing: border-box;

  font-size: 13px;
  line-height: 16px;

  color: #000;
}

#container .partQuest .questionDetail .changeQuestion button.nextBtn {
  background: #145da0;
  border: 1px solid #145da0;
  box-sizing: border-box;

  font-size: 13px;
  line-height: 16px;

  color: #ffffff;
}
</style>